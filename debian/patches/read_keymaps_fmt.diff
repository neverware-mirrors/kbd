#! /bin/sh -e
## 90_read_keymaps_fmt.dpatch by Denis Barbier <barbier@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Description: in order to work under legacy and UTF-8 locales,
## DP: two keymaps must be provided.  With this patch, a single keymap
## DP: can be loaded both in ASCII and UTF-8 mode.
## DP: Date: 2004-07-31

if [ $# -lt 1 ]; then
    echo "`basename $0`: script expects -patch|-unpatch as argument" >&2
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch} ${2:+-d $2}"

case "$1" in
    -patch) patch -p1 ${patch_opts} < $0;;
    -unpatch) patch -R -p1 ${patch_opts} < $0;;
    *)
        echo "`basename $0`: script expects -patch|-unpatch as argument" >&2
        exit 1;;
esac

exit 0

@DPATCH@
Index: trunk/po/cat-id-tbl.c
===================================================================
--- trunk.orig/po/cat-id-tbl.c
+++ trunk/po/cat-id-tbl.c
@@ -76,128 +76,139 @@
   {"\
 \t\t\t    interpret character action codes to be from the\n\
 \t\t\t    specified character set\n", 42},
-  {"error executing  %s\n", 43},
-  {"Couldnt open %s\n", 44},
-  {"usage: getkeycodes\n", 45},
-  {"Plain scancodes xx (hex) versus keycodes (dec)\n", 46},
-  {"0 is an error; for 1-88 (0x01-0x58) scancode equals keycode\n", 47},
-  {"for 1-%d (0x01-0x%02x) scancode equals keycode\n", 48},
   {"\
+%s version %s\n\
 \n\
+Usage: %s [options]\n\
 \n\
-Escaped scancodes e0 xx (hex)\n", 49},
-  {"failed to get keycode for scancode 0x%x\n", 50},
+Valid options are:\n\
+\n\
+\t-h --help            display this help text\n\
+\t-V --version         display this help text\n\
+\t-n --next-available  display next unallocated VT\n", 43},
+  {"Couldn't read VTNO: ", 44},
+  {"error executing  %s\n", 45},
+  {"Couldnt open %s\n", 46},
+  {"usage: getkeycodes\n", 47},
+  {"Plain scancodes xx (hex) versus keycodes (dec)\n", 48},
+  {"0 is an error; for 1-88 (0x01-0x58) scancode equals keycode\n", 49},
+  {"for 1-%d (0x01-0x%02x) scancode equals keycode\n", 50},
+  {"\
+\n\
+\n\
+Escaped scancodes e0 xx (hex)\n", 51},
+  {"failed to get keycode for scancode 0x%x\n", 52},
   {"\
 Usage:\n\
-\t%s [-s] [-C console]\n", 51},
-  {"usage: kbd_mode [-a|-u|-k|-s]\n", 52},
-  {"kbd_mode: error reading keyboard mode\n", 53},
-  {"The keyboard is in raw (scancode) mode\n", 54},
-  {"The keyboard is in mediumraw (keycode) mode\n", 55},
-  {"The keyboard is in the default (ASCII) mode\n", 56},
-  {"The keyboard is in Unicode (UTF-8) mode\n", 57},
-  {"The keyboard is in some unknown mode\n", 58},
-  {"%s: error setting keyboard mode\n", 59},
-  {"Typematic Rate set to %.1f cps (delay = %d ms)\n", 60},
-  {"Usage: kbdrate [-V] [-s] [-r rate] [-d delay]\n", 61},
-  {"Cannot open /dev/port", 62},
-  {"bug: getfont called with count<256\n", 63},
-  {"%s: out of memory\n", 64},
-  {"unknown charset %s - ignoring charset request\n", 65},
-  {"assuming iso-8859-1 %s\n", 66},
-  {"assuming iso-8859-15 %s\n", 67},
-  {"assuming iso-8859-2 %s\n", 68},
-  {"assuming iso-8859-3 %s\n", 69},
-  {"assuming iso-8859-4 %s\n", 70},
-  {"unknown keysym '%s'\n", 71},
-  {"plus before %s ignored\n", 72},
+\t%s [-s] [-C console]\n", 53},
+  {"usage: kbd_mode [-a|-u|-k|-s]\n", 54},
+  {"kbd_mode: error reading keyboard mode\n", 55},
+  {"The keyboard is in raw (scancode) mode\n", 56},
+  {"The keyboard is in mediumraw (keycode) mode\n", 57},
+  {"The keyboard is in the default (ASCII) mode\n", 58},
+  {"The keyboard is in Unicode (UTF-8) mode\n", 59},
+  {"The keyboard is in some unknown mode\n", 60},
+  {"%s: error setting keyboard mode\n", 61},
+  {"Typematic Rate set to %.1f cps (delay = %d ms)\n", 62},
+  {"Usage: kbdrate [-V] [-s] [-r rate] [-d delay]\n", 63},
+  {"Cannot open /dev/port", 64},
+  {"bug: getfont called with count<256\n", 65},
+  {"%s: out of memory\n", 66},
+  {"unknown charset %s - ignoring charset request\n", 67},
+  {"null symbol found", 68},
+  {"assuming iso-8859-1 %s\n", 69},
+  {"assuming iso-8859-15 %s\n", 70},
+  {"assuming iso-8859-2 %s\n", 71},
+  {"assuming iso-8859-3 %s\n", 72},
+  {"assuming iso-8859-4 %s\n", 73},
+  {"unknown keysym '%s'\n", 74},
   {"\
 Usage:\n\
-\t%s [-C console] [-o map.orig]\n", 73},
-  {"Bad input line: %s\n", 74},
-  {"%s: Glyph number (0x%x) larger than font length\n", 75},
-  {"%s: Bad end of range (0x%x)\n", 76},
-  {"%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\n", 77},
+\t%s [-C console] [-o map.orig]\n", 75},
+  {"Bad input line: %s\n", 76},
+  {"%s: Glyph number (0x%x) larger than font length\n", 77},
+  {"%s: Bad end of range (0x%x)\n", 78},
+  {"%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\n", 79},
   {"\
 %s: Unicode range U+%x-U+%x not of the same length as font position range 0x%\
-x-0x%x\n", 78},
-  {"%s: trailing junk (%s) ignored\n", 79},
-  {"Loading unicode map from file %s\n", 80},
-  {"%s: %s: Warning: line too long\n", 81},
+x-0x%x\n", 80},
+  {"%s: trailing junk (%s) ignored\n", 81},
+  {"Loading unicode map from file %s\n", 82},
+  {"%s: %s: Warning: line too long\n", 83},
   {"\
 %s: not loading empty unimap\n\
-(if you insist: use option -f to override)\n", 82},
-  {"entry", 83},
-  {"entries", 84},
-  {"Saved unicode map on `%s'\n", 85},
-  {"Appended Unicode map\n", 86},
-  {"usage: %s [-v] [-o map.orig] map-file\n", 87},
-  {"mapscrn: cannot open map file _%s_\n", 88},
-  {"Cannot stat map file", 89},
-  {"Loading binary direct-to-font screen map from file %s\n", 90},
-  {"Error reading map from file `%s'\n", 91},
-  {"Loading binary unicode screen map from file %s\n", 92},
-  {"Loading symbolic screen map from file %s\n", 93},
-  {"Error parsing symbolic map from `%s', line %d\n", 94},
-  {"Error writing map to file\n", 95},
-  {"Cannot read console map\n", 96},
-  {"Saved screen map in `%s'\n", 97},
-  {"%s: short ucs2 unicode table\n", 98},
-  {"%s: short utf8 unicode table\n", 99},
-  {"%s: bad utf8\n", 100},
-  {"%s: unknown utf8 error\n", 101},
-  {"%s: short unicode table\n", 102},
-  {"%s: Error reading input font", 103},
-  {"%s: Bad call of readpsffont\n", 104},
-  {"%s: Unsupported psf file mode (%d)\n", 105},
-  {"%s: Unsupported psf version (%d)\n", 106},
-  {"%s: zero input font length?\n", 107},
-  {"%s: zero input character size?\n", 108},
-  {"%s: Input file: bad input length (%d)\n", 109},
-  {"%s: Input file: trailing garbage\n", 110},
-  {"appendunicode: illegal unicode %u\n", 111},
-  {"Cannot write font file header", 112},
-  {"%s: Warning: line too long\n", 113},
-  {"%s: Bad input line: %s\n", 114},
-  {"%s: Glyph number (0x%lx) past end of font\n", 115},
-  {"%s: Bad end of range (0x%lx)\n", 116},
+(if you insist: use option -f to override)\n", 84},
+  {"entry", 85},
+  {"entries", 86},
+  {"Saved unicode map on `%s'\n", 87},
+  {"Appended Unicode map\n", 88},
+  {"usage: %s [-v] [-o map.orig] map-file\n", 89},
+  {"mapscrn: cannot open map file _%s_\n", 90},
+  {"Cannot stat map file", 91},
+  {"Loading binary direct-to-font screen map from file %s\n", 92},
+  {"Error reading map from file `%s'\n", 93},
+  {"Loading binary unicode screen map from file %s\n", 94},
+  {"Loading symbolic screen map from file %s\n", 95},
+  {"Error parsing symbolic map from `%s', line %d\n", 96},
+  {"Error writing map to file\n", 97},
+  {"Cannot read console map\n", 98},
+  {"Saved screen map in `%s'\n", 99},
+  {"%s: short ucs2 unicode table\n", 100},
+  {"%s: short utf8 unicode table\n", 101},
+  {"%s: bad utf8\n", 102},
+  {"%s: unknown utf8 error\n", 103},
+  {"%s: short unicode table\n", 104},
+  {"%s: Error reading input font", 105},
+  {"%s: Bad call of readpsffont\n", 106},
+  {"%s: Unsupported psf file mode (%d)\n", 107},
+  {"%s: Unsupported psf version (%d)\n", 108},
+  {"%s: zero input font length?\n", 109},
+  {"%s: zero input character size?\n", 110},
+  {"%s: Input file: bad input length (%d)\n", 111},
+  {"%s: Input file: trailing garbage\n", 112},
+  {"appendunicode: illegal unicode %u\n", 113},
+  {"Cannot write font file header", 114},
+  {"%s: Warning: line too long\n", 115},
+  {"%s: Bad input line: %s\n", 116},
+  {"%s: Glyph number (0x%lx) past end of font\n", 117},
+  {"%s: Bad end of range (0x%lx)\n", 118},
   {"\
 %s: Corresponding to a range of font positions, there should be a Unicode \
-range\n", 117},
+range\n", 119},
   {"\
 Usage:\n\
-\t%s infont intable outfont\n", 118},
+\t%s infont intable outfont\n", 120},
   {"\
 Usage:\n\
-\t%s infont [outtable]\n", 119},
+\t%s infont [outtable]\n", 121},
   {"\
 Usage:\n\
-\t%s infont outfont\n", 120},
+\t%s infont outfont\n", 122},
   {"\
 Usage:\n\
-\t%s [-i infont] [-o outfont] [-it intable] [-ot outtable] [-nt]\n", 121},
-  {"%s: Bad magic number on %s\n", 122},
-  {"%s: psf file with unknown magic\n", 123},
-  {"%s: input font does not have an index\n", 124},
-  {"resizecons: cannot find videomode file %s\n", 125},
-  {"Invalid number of lines\n", 126},
-  {"Old mode: %dx%d  New mode: %dx%d\n", 127},
-  {"Old #scanlines: %d  New #scanlines: %d  Character height: %d\n", 128},
-  {"resizecons: the command `%s' failed\n", 129},
+\t%s [-i infont] [-o outfont] [-it intable] [-ot outtable] [-nt]\n", 123},
+  {"%s: Bad magic number on %s\n", 124},
+  {"%s: psf file with unknown magic\n", 125},
+  {"%s: input font does not have an index\n", 126},
+  {"resizecons: cannot find videomode file %s\n", 127},
+  {"Invalid number of lines\n", 128},
+  {"Old mode: %dx%d  New mode: %dx%d\n", 129},
+  {"Old #scanlines: %d  New #scanlines: %d  Character height: %d\n", 130},
+  {"resizecons: the command `%s' failed\n", 131},
   {"\
-resizecons: don't forget to change TERM (maybe to con%dx%d or linux-%dx%d)\n", 130},
+resizecons: don't forget to change TERM (maybe to con%dx%d or linux-%dx%d)\n", 132},
   {"\
 resizecons:\n\
 call is:  resizecons COLSxROWS  or:  resizecons COLS ROWS\n\
 or: resizecons -lines ROWS, with ROWS one of 25, 28, 30, 34, 36, 40, 44, 50, \
-60\n", 131},
-  {"resizecons: cannot get I/O permissions.\n", 132},
-  {"usage: screendump [n]\n", 133},
-  {"Error reading %s\n", 134},
-  {"couldn't read %s, and cannot ioctl dump\n", 135},
-  {"couldn't read %s\n", 136},
-  {"Strange ... screen is both %dx%d and %dx%d ??\n", 137},
-  {"Error writing screendump\n", 138},
+60\n", 133},
+  {"resizecons: cannot get I/O permissions.\n", 134},
+  {"usage: screendump [n]\n", 135},
+  {"Error reading %s\n", 136},
+  {"couldn't read %s, and cannot ioctl dump\n", 137},
+  {"couldn't read %s\n", 138},
+  {"Strange ... screen is both %dx%d and %dx%d ??\n", 139},
+  {"Error writing screendump\n", 140},
   {"\
 Usage: setfont [write-options] [-<N>] [newfont..] [-m consolemap] [-u \
 unicodemap]\n\
@@ -222,49 +233,49 @@
     -v         Be verbose.\n\
     -C <cons>  Indicate console device to be used.\n\
     -V         Print version and exit.\n\
-Files are loaded from the current directory or /usr/lib/kbd/*/.\n", 139},
-  {"setfont: too many input files\n", 140},
+Files are loaded from the current directory or /usr/lib/kbd/*/.\n", 141},
+  {"setfont: too many input files\n", 142},
   {"\
 setfont: cannot both restore from character ROM and from file. Font \
-unchanged.\n", 141},
-  {"Bad character height %d\n", 142},
-  {"Bad character width %d\n", 143},
-  {"%s: font position 32 is nonblank\n", 144},
-  {"%s: wiped it\n", 145},
-  {"%s: background will look funny\n", 146},
-  {"Loading %d-char %dx%d font from file %s\n", 147},
-  {"Loading %d-char %dx%d font\n", 148},
-  {"Loading %d-char %dx%d (%d) font from file %s\n", 149},
-  {"Loading %d-char %dx%d (%d) font\n", 150},
-  {"%s: bug in do_loadtable\n", 151},
-  {"Loading Unicode mapping table...\n", 152},
-  {"Cannot open font file %s\n", 153},
-  {"When loading several fonts, all must be psf fonts - %s isn't\n", 154},
-  {"Read %d-char %dx%d font from file %s\n", 155},
-  {"When loading several fonts, all must have the same height\n", 156},
-  {"When loading several fonts, all must have the same width\n", 157},
-  {"Cannot find default font\n", 158},
-  {"Cannot find %s font\n", 159},
-  {"Reading font file %s\n", 160},
-  {"No final newline in combine file\n", 161},
-  {"Too many files to combine\n", 162},
-  {"Hmm - a font from restorefont? Using the first half.\n", 163},
-  {"Bad input file size\n", 164},
+unchanged.\n", 143},
+  {"Bad character height %d\n", 144},
+  {"Bad character width %d\n", 145},
+  {"%s: font position 32 is nonblank\n", 146},
+  {"%s: wiped it\n", 147},
+  {"%s: background will look funny\n", 148},
+  {"Loading %d-char %dx%d font from file %s\n", 149},
+  {"Loading %d-char %dx%d font\n", 150},
+  {"Loading %d-char %dx%d (%d) font from file %s\n", 151},
+  {"Loading %d-char %dx%d (%d) font\n", 152},
+  {"%s: bug in do_loadtable\n", 153},
+  {"Loading Unicode mapping table...\n", 154},
+  {"Cannot open font file %s\n", 155},
+  {"When loading several fonts, all must be psf fonts - %s isn't\n", 156},
+  {"Read %d-char %dx%d font from file %s\n", 157},
+  {"When loading several fonts, all must have the same height\n", 158},
+  {"When loading several fonts, all must have the same width\n", 159},
+  {"Cannot find default font\n", 160},
+  {"Cannot find %s font\n", 161},
+  {"Reading font file %s\n", 162},
+  {"No final newline in combine file\n", 163},
+  {"Too many files to combine\n", 164},
+  {"Hmm - a font from restorefont? Using the first half.\n", 165},
+  {"Bad input file size\n", 166},
   {"\
 This file contains 3 fonts: 8x8, 8x14 and 8x16. Please indicate\n\
-using an option -8 or -14 or -16 which one you want loaded.\n", 165},
-  {"You asked for font size %d, but only 8, 14, 16 are possible here.\n", 166},
-  {"Found nothing to save\n", 167},
-  {"Cannot write font file", 168},
-  {"Saved %d-char %dx%d font file on %s\n", 169},
+using an option -8 or -14 or -16 which one you want loaded.\n", 167},
+  {"You asked for font size %d, but only 8, 14, 16 are possible here.\n", 168},
+  {"Found nothing to save\n", 169},
+  {"Cannot write font file", 170},
+  {"Saved %d-char %dx%d font file on %s\n", 171},
   {"\
 usage: setkeycode scancode keycode ...\n\
  (where scancode is either xx or e0xx, given in hexadecimal,\n\
-  and keycode is given in decimal)\n", 170},
-  {"even number of arguments expected", 171},
-  {"error reading scancode", 172},
-  {"code outside bounds", 173},
-  {"failed to set scancode %x to keycode %d\n", 174},
+  and keycode is given in decimal)\n", 172},
+  {"even number of arguments expected", 173},
+  {"error reading scancode", 174},
+  {"code outside bounds", 175},
+  {"failed to set scancode %x to keycode %d\n", 176},
   {"\
 Usage:\n\
 \tsetleds [-v] [-L] [-D] [-F] [[+|-][ num | caps | scroll %s]]\n\
@@ -277,56 +288,56 @@
 (and these are usually reflected in the leds).\n\
 With -L, setleds only sets the leds, and leaves the flags alone.\n\
 With -D, setleds sets both the flags and the default flags, so\n\
-that a subsequent reset will not change the flags.\n", 175},
-  {"on ", 176},
-  {"off", 177},
-  {"Error reading current led setting. Maybe stdin is not a VT?\n", 178},
-  {"\
-Error reading current flags setting. Maybe you are not on the console?\n", 179},
-  {"Error reading current led setting from /dev/kbd.\n", 180},
-  {"KIOCGLED unavailable?\n", 181},
-  {"KIOCSLED unavailable?\n", 182},
-  {"Error opening /dev/kbd.\n", 183},
-  {"Error resetting ledmode\n", 184},
-  {"Current default flags:  ", 185},
-  {"Current flags:          ", 186},
-  {"Current leds:           ", 187},
+that a subsequent reset will not change the flags.\n", 177},
+  {"on ", 178},
+  {"off", 179},
+  {"Error reading current led setting. Maybe stdin is not a VT?\n", 180},
+  {"\
+Error reading current flags setting. Maybe you are not on the console?\n", 181},
+  {"Error reading current led setting from /dev/kbd.\n", 182},
+  {"KIOCGLED unavailable?\n", 183},
+  {"KIOCSLED unavailable?\n", 184},
+  {"Error opening /dev/kbd.\n", 185},
+  {"Error resetting ledmode\n", 186},
+  {"Current default flags:  ", 187},
+  {"Current flags:          ", 188},
+  {"Current leds:           ", 189},
   {"\
 unrecognized argument: _%s_\n\
-\n", 188},
-  {"Old default flags:    ", 189},
-  {"New default flags:    ", 190},
-  {"Old flags:            ", 191},
-  {"New flags:            ", 192},
-  {"Old leds:             ", 193},
-  {"New leds:             ", 194},
+\n", 190},
+  {"Old default flags:    ", 191},
+  {"New default flags:    ", 192},
+  {"Old flags:            ", 193},
+  {"New flags:            ", 194},
+  {"Old leds:             ", 195},
+  {"New leds:             ", 196},
   {"\
 Usage:\n\
 \tsetmetamode [ metabit | meta | bit | escprefix | esc | prefix ]\n\
 Each vt has his own copy of this bit. Use\n\
 \tsetmetamode [arg] < /dev/ttyn\n\
 to change the settings of another vt.\n\
-The setting before and after the change are reported.\n", 195},
-  {"Meta key sets high order bit\n", 196},
-  {"Meta key gives Esc prefix\n", 197},
-  {"Strange mode for Meta key?\n", 198},
-  {"Error reading current setting. Maybe stdin is not a VT?\n", 199},
-  {"old state:    ", 200},
-  {"new state:    ", 201},
-  {"usage: %s\n", 202},
-  {"failed to restore original translation table\n", 203},
-  {"failed to restore original unimap\n", 204},
-  {"cannot change translation table\n", 205},
-  {"%s: out of memory?\n", 206},
+The setting before and after the change are reported.\n", 197},
+  {"Meta key sets high order bit\n", 198},
+  {"Meta key gives Esc prefix\n", 199},
+  {"Strange mode for Meta key?\n", 200},
+  {"Error reading current setting. Maybe stdin is not a VT?\n", 201},
+  {"old state:    ", 202},
+  {"new state:    ", 203},
+  {"usage: %s\n", 204},
+  {"failed to restore original translation table\n", 205},
+  {"failed to restore original unimap\n", 206},
+  {"cannot change translation table\n", 207},
+  {"%s: out of memory?\n", 208},
   {"\
 usage: showconsolefont [-v|-V]\n\
-(probably after loading a font with `setfont font')\n", 207},
-  {"?UNKNOWN?", 208},
-  {"kb mode was %s\n", 209},
+(probably after loading a font with `setfont font')\n", 209},
+  {"?UNKNOWN?", 210},
+  {"kb mode was %s\n", 211},
   {"\
 [ if you are trying this under X, it might not work\n\
-since the X server is also reading /dev/console ]\n", 210},
-  {"caught signal %d, cleaning up...\n", 211},
+since the X server is also reading /dev/console ]\n", 212},
+  {"caught signal %d, cleaning up...\n", 213},
   {"\
 showkey version %s\n\
 \n\
@@ -337,16 +348,16 @@
 \t-h --help\tdisplay this help text\n\
 \t-a --ascii\tdisplay the decimal/octal/hex values of the keys\n\
 \t-s --scancodes\tdisplay only the raw scan-codes\n\
-\t-k --keycodes\tdisplay only the interpreted keycodes (default)\n", 212},
+\t-k --keycodes\tdisplay only the interpreted keycodes (default)\n", 214},
   {"\
 \n\
 Press any keys - Ctrl-D will terminate this program\n\
-\n", 213},
-  {"press any key (program terminates 10s after last keypress)...\n", 214},
-  {"release", 215},
-  {"press", 216},
-  {"keycode %3d %s\n", 217},
-  {"%s from %s\n", 218},
+\n", 215},
+  {"press any key (program terminates 10s after last keypress)...\n", 216},
+  {"release", 217},
+  {"press", 218},
+  {"keycode %3d %s\n", 219},
+  {"%s from %s\n", 220},
 };
 
-int _msg_tbl_length = 218;
+int _msg_tbl_length = 220;
Index: trunk/src/analyze.l
===================================================================
--- trunk.orig/src/analyze.l
+++ trunk/src/analyze.l
@@ -77,7 +77,7 @@
 \-			{return(DASH);}
 \,			{return(COMMA);}
 \+			{return(PLUS);}
-{Unicode}		{yylval=strtol(yytext+1,NULL,16);return(UNUMBER);}
+{Unicode}		{yylval=strtol(yytext+1,NULL,16) ^ 0xf000;return(UNUMBER);}
 {Decimal}|{Octal}|{Hex}	{yylval=strtol(yytext,NULL,0);return(NUMBER);}
 <RVALUE>{Literal}	{return((yylval=ksymtocode(yytext))==-1?ERROR:LITERAL);}
 {Charset}		{return(CHARSET);}
Index: trunk/src/dumpkeys.c
===================================================================
--- trunk.orig/src/dumpkeys.c
+++ trunk/src/dumpkeys.c
@@ -131,11 +131,10 @@
 	t = KTYP(code);
 	v = KVAL(code);
 	if (t >= syms_size) {
-		code = code ^ 0xf000;
-		if (!numeric && (p = unicodetoksym(code)) != NULL)
+		if (!numeric && (p = codetoksym(code)) != NULL)
 			printf("%-16s", p);
 		else
-			printf("U+%04x          ", code);
+			printf("U+%04x          ", code ^ 0xf000);
 		return;
 	}
 	if (t == KT_LETTER) {
Index: trunk/src/ksyms.c
===================================================================
--- trunk.orig/src/ksyms.c
+++ trunk/src/ksyms.c
@@ -1,3 +1,4 @@
+#include <linux/kd.h>
 #include <linux/keyboard.h>
 #include <stdio.h>
 #include <string.h>
@@ -1689,10 +1690,17 @@
 }
 
 const char *
-unicodetoksym(int code) {
+codetoksym(int code) {
 	int i, j;
 	sym *p;
 
+	if (KTYP(code) == KT_META)
+		return NULL;
+	if (KTYP(code) == KT_LETTER)
+		code = K(KT_LATIN, KVAL(code));
+	if (KTYP(code) < syms_size)
+		return syms[KTYP(code)].table[KVAL(code)];
+	code = code ^ 0xf000;
 	if (code < 0)
 		return NULL;
 	if (code < 0x80)
@@ -1709,25 +1717,40 @@
 
 /* Functions for loadkeys. */
 
-int unicode_used = 0;
-
 int
 ksymtocode(const char *s) {
 	int i;
-	int j, jmax;
+	int j;
 	int keycode;
+	int save_prefer_unicode;
+	int syms_start = 0;
 	sym *p;
 
+	if (!s) {
+		fprintf(stderr, "%s\n", _("null symbol found"));
+		return -1;
+	}
+
 	if (!strncmp(s, "Meta_", 5)) {
+		/* Temporarily set prefer_unicode to ensure that keycode is
+		   right. */
+		save_prefer_unicode = prefer_unicode;
+		prefer_unicode = 0;
 		keycode = ksymtocode(s+5);
+		prefer_unicode = save_prefer_unicode;
 		if (KTYP(keycode) == KT_LATIN)
 			return K(KT_META, KVAL(keycode));
 		/* fall through to error printf */
 	}
 
-	for (i = 0; i < syms_size; i++) {
-		jmax = ((i == 0 && prefer_unicode) ? 128 : syms[i].size);
-		for (j = 0; j < jmax; j++)
+	if (prefer_unicode) {
+		for (j = 0; j < 0x80; j++)
+			if (!strcmp(s,iso646_syms[j]))
+				return (j ^ 0xf000);
+		syms_start = 1;
+	}
+	for (i = syms_start; i < syms_size; i++) {
+		for (j = 0; j < syms[i].size; j++)
 			if (!strcmp(s,syms[i].table[j]))
 				return K(i, j);
 	}
@@ -1741,8 +1764,7 @@
 			p = charsets[i].charnames;
 			for (j = charsets[i].start; j < 256; j++, p++)
 				if (!strcmp(s,p->name)) {
-					unicode_used = 1;
-					return (p->uni ^ 0xf000); /* %%% */
+					return (p->uni ^ 0xf000);
 				}
 		}
 	} else /* if (!chosen_charset) */ {
@@ -1794,38 +1816,32 @@
 }
 
 int
-unicodetocode(int code) {
-	const char *s;
-
-	s = unicodetoksym(code);
-	if (s)
-		return ksymtocode(s);
-	else {
-		unicode_used = 1;
-		return (code ^ 0xf000); /* %%% */
+add_number(int code)
+{
+	const char * kc;
+	if (KTYP(code) == KT_META)
+		return code;
+	if (prefer_unicode && KTYP(code) >= syms_size) {
+		if ((code ^ 0xf000) < 0x80)
+			return K(KT_LATIN, code ^ 0xf000);
+		else
+			return code;
 	}
+	if (!prefer_unicode && KTYP(code) < syms_size)
+		return code;
+	kc = codetoksym(code);
+	if (kc == NULL)
+		return code;
+	else
+		return ksymtocode(kc);
 }
 
 int
 add_capslock(int code)
 {
-	char buf[7];
-	const char *p;
-
 	if (KTYP(code) == KT_LATIN)
 		return K(KT_LETTER, KVAL(code));
-	if (KTYP(code) >= syms_size) {
-		if ((p = unicodetoksym(code ^ 0xf000)) == NULL) {
-			sprintf(buf, "U+%04x", code ^ 0xf000);
-			p = buf;
-		}
-	} else {
-		sprintf(buf, "0x%04x", code);
-		p = buf;
-	}
-#if 0
-	/* silence the common usage  dumpkeys | loadkeys -u  */
-	fprintf(stderr, _("plus before %s ignored\n"), p);
-#endif
-	return code;
+	if (KTYP(code) >= syms_size && (code ^ 0xf000) < 0x80)
+		return K(KT_LETTER, code ^ 0xf000);
+	return add_number(code);
 }
Index: trunk/src/ksyms.h
===================================================================
--- trunk.orig/src/ksyms.h
+++ trunk/src/ksyms.h
@@ -23,10 +23,10 @@
 extern const int syn_size;
 
 extern int set_charset(const char *name);
-extern const char *unicodetoksym(int code);
+extern const char *codetoksym(int code);
 extern void list_charsets(FILE *f);
 extern int ksymtocode(const char *s);
-extern int unicodetocode(int code);
+extern int add_number(int code);
 extern int add_capslock(int code);
 
 #endif
Index: trunk/src/loadkeys.y
===================================================================
--- trunk.orig/src/loadkeys.y
+++ trunk/src/loadkeys.y
@@ -74,7 +74,6 @@
 extern char *xstrdup(char *);
 int key_buf[MAX_NR_KEYMAPS];
 int mod;
-extern int unicode_used;
 int private_error_ct = 0;
 
 extern int rvalct;
@@ -227,13 +226,15 @@
 			}
 		;
 rvalue		: NUMBER
-			{$$=$1;}
+			{$$=add_number($1);}
+		| LITERAL
+			{$$=add_number($1);}
 		| UNUMBER
-			{$$=($1 ^ 0xf000); unicode_used=1;}
+			{$$=add_number($1);}
                 | PLUS NUMBER
                         {$$=add_capslock($2);}
-		| LITERAL
-			{$$=$1;}
+                | PLUS UNUMBER
+                        {$$=add_capslock($2);}
                 | PLUS LITERAL
                         {$$=add_capslock($2);}
 		;
@@ -262,6 +263,7 @@
 char **args;
 int optd = 0;
 int optm = 0;
+int optu = 0;
 int opts = 0;
 int verbose = 0;
 int quiet = 0;
@@ -283,6 +285,8 @@
 		{ NULL, 0, NULL, 0 }
 	};
 	int c;
+	int fd;
+	int mode;
 
 	set_progname(argv[0]);
 
@@ -303,6 +307,7 @@
 				break;
 			case 'u':
 				set_charset("unicode");
+				optu = 1;
 				break;
 			case 'q':
 				quiet = 1;
@@ -318,8 +323,20 @@
 		}
 	}
 
+	if (!optm) {
+		fd = getfd(NULL);
+		if (!optu) {
+			if (ioctl(fd, KDGKBMODE, &mode)) {
+				perror("KDGKBMODE");
+				fprintf(stderr, _("loadkeys: error reading keyboard mode\n"));
+				exit(1);
+			}
+			if (mode == K_UNICODE)
+				set_charset("unicode");
+		}
+	}
+
 	args = argv + optind - 1;
-	unicode_used = 0;
 	yywrap();	/* set up the first input file, if any */
 	if (yyparse() || private_error_ct) {
 		fprintf(stderr, _("syntax error in map file\n"));
@@ -766,15 +783,6 @@
 	int i,j,fail;
 	int oldm;
 
-	if (unicode_used) {
-	     /* Switch keyboard mode for a moment -
-		do not complain about errors.
-		Do not attempt a reset if the change failed. */
-	     if (ioctl(fd, KDGKBMODE, &oldm)
-	        || (oldm != K_UNICODE && ioctl(fd, KDSKBMODE, K_UNICODE)))
-		  oldm = K_UNICODE;
-	}
-
 	for(i=0; i<MAX_NR_KEYMAPS; i++) {
 	    if (key_map[i]) {
 		for(j=0; j<NR_KEYS; j++) {
@@ -839,16 +847,6 @@
 		}
 	    }
 	}
-
-	if(unicode_used && oldm != K_UNICODE) {
-	     if (ioctl(fd, KDSKBMODE, oldm)) {
-		  fprintf(stderr, _("%s: failed to restore keyboard mode\n"),
-			  progname);
-	     }
-	     fprintf(stderr, _("%s: warning: this map uses Unicode symbols\n"
-		             "    (perhaps you want to do `kbd_mode -u'?)\n"),
-		     progname);
-	}
 	return ct;
 }
 
